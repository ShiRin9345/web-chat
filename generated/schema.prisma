// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../generated"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Profile {
  id         String   @id @default(uuid())
  position   String   @default("")
  sex        String   @default("")
  phone      String   @default("")
  email      String   @default("")
  signature  String   @default("")
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  bgImageUrl String   @default("")
  tags       String[] @default([])

  @@index([userId])
}

model User {
  id                      String             @id @default(uuid())
  userId                  String             @unique
  groupMessage            GroupMessage[]
  fullName                String
  imageUrl                String
  code                    String             @unique
  sentPrivateMessage      PrivateMessage[]   @relation("sender")
  receivedPrivateMessage  PrivateMessage[]   @relation("receiver")
  conversations           Conversation[]
  NewFriendSendRequest    NewFriendRequest[] @relation("requestSendUser")
  NewFriendReceiveRequest NewFriendRequest[] @relation("requestReceiveUser")
  friends                 User[]             @relation("UserFriends")
  friendOf                User[]             @relation("UserFriends")
  profile                 Profile?
  moderatorGroup          Group[]            @relation("moderator")
  memberGroup             Group[]            @relation("member")
  ownerGroup              Group[]            @relation("owner")
}

model Group {
  id            String         @id @default(uuid())
  name          String
  groupMessages GroupMessage[]
  members       User[]         @relation("member")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  owner         User           @relation("owner", fields: [ownerId], references: [userId])
  ownerId       String

  moderators User[] @relation("moderator")

  @@index(name)
}

enum MessageType {
  IMAGE
  TEXT
  PDF
}

enum RequestState {
  PENDING
  AGREED
  REJECTED
}

model NewFriendRequest {
  id         String       @id @default(uuid())
  fromUserId String
  from       User         @relation("requestSendUser", fields: [fromUserId], references: [userId], onDelete: Cascade)
  toUserId   String
  to         User         @relation("requestReceiveUser", fields: [toUserId], references: [userId], onDelete: Cascade)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  state      RequestState

  @@index([fromUserId])
  @@index([toUserId])
}

model GroupMessage {
  id        String      @id @default(uuid())
  type      MessageType
  content   String
  Group     Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  sender    User        @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  senderId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index(groupId)
  @@index(senderId)
}

model PrivateMessage {
  id             String       @id @default(uuid())
  content        String
  senderId       String
  sender         User         @relation("sender", fields: [senderId], references: [userId], onDelete: Cascade)
  receiverId     String
  receiver       User         @relation("receiver", fields: [receiverId], references: [userId], onDelete: Cascade)
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  type           MessageType
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index(senderId)
  @@index(receiverId)
  @@index(conversationId)
}

model Conversation {
  id        String           @id @default(uuid())
  messages  PrivateMessage[]
  members   User[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}
