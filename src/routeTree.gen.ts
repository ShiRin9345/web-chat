/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as Test2RouteImport } from './routes/test2'
import { Route as Test1RouteImport } from './routes/test1'
import { Route as TestRouteImport } from './routes/test'
import { Route as mainRouteRouteImport } from './routes/(main)/route'
import { Route as mainIndexRouteImport } from './routes/(main)/index'
import { Route as authSignUpIndexRouteImport } from './routes/(auth)/signUp/index'
import { Route as authSignInIndexRouteImport } from './routes/(auth)/signIn/index'
import { Route as authInitialIndexRouteImport } from './routes/(auth)/initial/index'
import { Route as mainGroupGroupIdRouteImport } from './routes/(main)/group/$groupId'

const Test2Route = Test2RouteImport.update({
  id: '/test2',
  path: '/test2',
  getParentRoute: () => rootRouteImport,
} as any)
const Test1Route = Test1RouteImport.update({
  id: '/test1',
  path: '/test1',
  getParentRoute: () => rootRouteImport,
} as any)
const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const mainRouteRoute = mainRouteRouteImport.update({
  id: '/(main)',
  getParentRoute: () => rootRouteImport,
} as any)
const mainIndexRoute = mainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => mainRouteRoute,
} as any)
const authSignUpIndexRoute = authSignUpIndexRouteImport.update({
  id: '/(auth)/signUp/',
  path: '/signUp/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInIndexRoute = authSignInIndexRouteImport.update({
  id: '/(auth)/signIn/',
  path: '/signIn/',
  getParentRoute: () => rootRouteImport,
} as any)
const authInitialIndexRoute = authInitialIndexRouteImport.update({
  id: '/(auth)/initial/',
  path: '/initial/',
  getParentRoute: () => rootRouteImport,
} as any)
const mainGroupGroupIdRoute = mainGroupGroupIdRouteImport
  .update({
    id: '/group/$groupId',
    path: '/group/$groupId',
    getParentRoute: () => mainRouteRoute,
  } as any)
  .lazy(() =>
    import('./routes/(main)/group/$groupId.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof mainIndexRoute
  '/test': typeof TestRoute
  '/test1': typeof Test1Route
  '/test2': typeof Test2Route
  '/group/$groupId': typeof mainGroupGroupIdRoute
  '/initial': typeof authInitialIndexRoute
  '/signIn': typeof authSignInIndexRoute
  '/signUp': typeof authSignUpIndexRoute
}
export interface FileRoutesByTo {
  '/test': typeof TestRoute
  '/test1': typeof Test1Route
  '/test2': typeof Test2Route
  '/': typeof mainIndexRoute
  '/group/$groupId': typeof mainGroupGroupIdRoute
  '/initial': typeof authInitialIndexRoute
  '/signIn': typeof authSignInIndexRoute
  '/signUp': typeof authSignUpIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(main)': typeof mainRouteRouteWithChildren
  '/test': typeof TestRoute
  '/test1': typeof Test1Route
  '/test2': typeof Test2Route
  '/(main)/': typeof mainIndexRoute
  '/(main)/group/$groupId': typeof mainGroupGroupIdRoute
  '/(auth)/initial/': typeof authInitialIndexRoute
  '/(auth)/signIn/': typeof authSignInIndexRoute
  '/(auth)/signUp/': typeof authSignUpIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/test'
    | '/test1'
    | '/test2'
    | '/group/$groupId'
    | '/initial'
    | '/signIn'
    | '/signUp'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/test'
    | '/test1'
    | '/test2'
    | '/'
    | '/group/$groupId'
    | '/initial'
    | '/signIn'
    | '/signUp'
  id:
    | '__root__'
    | '/(main)'
    | '/test'
    | '/test1'
    | '/test2'
    | '/(main)/'
    | '/(main)/group/$groupId'
    | '/(auth)/initial/'
    | '/(auth)/signIn/'
    | '/(auth)/signUp/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  mainRouteRoute: typeof mainRouteRouteWithChildren
  TestRoute: typeof TestRoute
  Test1Route: typeof Test1Route
  Test2Route: typeof Test2Route
  authInitialIndexRoute: typeof authInitialIndexRoute
  authSignInIndexRoute: typeof authSignInIndexRoute
  authSignUpIndexRoute: typeof authSignUpIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test2': {
      id: '/test2'
      path: '/test2'
      fullPath: '/test2'
      preLoaderRoute: typeof Test2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test1': {
      id: '/test1'
      path: '/test1'
      fullPath: '/test1'
      preLoaderRoute: typeof Test1RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(main)': {
      id: '/(main)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof mainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(main)/': {
      id: '/(main)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof mainIndexRouteImport
      parentRoute: typeof mainRouteRoute
    }
    '/(auth)/signUp/': {
      id: '/(auth)/signUp/'
      path: '/signUp'
      fullPath: '/signUp'
      preLoaderRoute: typeof authSignUpIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signIn/': {
      id: '/(auth)/signIn/'
      path: '/signIn'
      fullPath: '/signIn'
      preLoaderRoute: typeof authSignInIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/initial/': {
      id: '/(auth)/initial/'
      path: '/initial'
      fullPath: '/initial'
      preLoaderRoute: typeof authInitialIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(main)/group/$groupId': {
      id: '/(main)/group/$groupId'
      path: '/group/$groupId'
      fullPath: '/group/$groupId'
      preLoaderRoute: typeof mainGroupGroupIdRouteImport
      parentRoute: typeof mainRouteRoute
    }
  }
}

interface mainRouteRouteChildren {
  mainIndexRoute: typeof mainIndexRoute
  mainGroupGroupIdRoute: typeof mainGroupGroupIdRoute
}

const mainRouteRouteChildren: mainRouteRouteChildren = {
  mainIndexRoute: mainIndexRoute,
  mainGroupGroupIdRoute: mainGroupGroupIdRoute,
}

const mainRouteRouteWithChildren = mainRouteRoute._addFileChildren(
  mainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  mainRouteRoute: mainRouteRouteWithChildren,
  TestRoute: TestRoute,
  Test1Route: Test1Route,
  Test2Route: Test2Route,
  authInitialIndexRoute: authInitialIndexRoute,
  authSignInIndexRoute: authSignInIndexRoute,
  authSignUpIndexRoute: authSignUpIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
