/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as initialIndexRouteImport } from './routes/(initial)/index'
import { Route as mainMainRouteRouteImport } from './routes/(main)/main/route'
import { Route as mainMainIndexRouteImport } from './routes/(main)/main/index'
import { Route as authSignUpIndexRouteImport } from './routes/(auth)/signUp/index'
import { Route as authSignInIndexRouteImport } from './routes/(auth)/signIn/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const initialIndexRoute = initialIndexRouteImport.update({
  id: '/(initial)/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const mainMainRouteRoute = mainMainRouteRouteImport.update({
  id: '/(main)/main',
  path: '/main',
  getParentRoute: () => rootRouteImport,
} as any)
const mainMainIndexRoute = mainMainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => mainMainRouteRoute,
} as any)
const authSignUpIndexRoute = authSignUpIndexRouteImport.update({
  id: '/(auth)/signUp/',
  path: '/signUp/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInIndexRoute = authSignInIndexRouteImport.update({
  id: '/(auth)/signIn/',
  path: '/signIn/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/test': typeof TestRoute
  '/main': typeof mainMainRouteRouteWithChildren
  '/': typeof initialIndexRoute
  '/signIn': typeof authSignInIndexRoute
  '/signUp': typeof authSignUpIndexRoute
  '/main/': typeof mainMainIndexRoute
}
export interface FileRoutesByTo {
  '/test': typeof TestRoute
  '/': typeof initialIndexRoute
  '/signIn': typeof authSignInIndexRoute
  '/signUp': typeof authSignUpIndexRoute
  '/main': typeof mainMainIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/test': typeof TestRoute
  '/(main)/main': typeof mainMainRouteRouteWithChildren
  '/(initial)/': typeof initialIndexRoute
  '/(auth)/signIn/': typeof authSignInIndexRoute
  '/(auth)/signUp/': typeof authSignUpIndexRoute
  '/(main)/main/': typeof mainMainIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/test' | '/main' | '/' | '/signIn' | '/signUp' | '/main/'
  fileRoutesByTo: FileRoutesByTo
  to: '/test' | '/' | '/signIn' | '/signUp' | '/main'
  id:
    | '__root__'
    | '/test'
    | '/(main)/main'
    | '/(initial)/'
    | '/(auth)/signIn/'
    | '/(auth)/signUp/'
    | '/(main)/main/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  TestRoute: typeof TestRoute
  mainMainRouteRoute: typeof mainMainRouteRouteWithChildren
  initialIndexRoute: typeof initialIndexRoute
  authSignInIndexRoute: typeof authSignInIndexRoute
  authSignUpIndexRoute: typeof authSignUpIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(initial)/': {
      id: '/(initial)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof initialIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(main)/main': {
      id: '/(main)/main'
      path: '/main'
      fullPath: '/main'
      preLoaderRoute: typeof mainMainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(main)/main/': {
      id: '/(main)/main/'
      path: '/'
      fullPath: '/main/'
      preLoaderRoute: typeof mainMainIndexRouteImport
      parentRoute: typeof mainMainRouteRoute
    }
    '/(auth)/signUp/': {
      id: '/(auth)/signUp/'
      path: '/signUp'
      fullPath: '/signUp'
      preLoaderRoute: typeof authSignUpIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signIn/': {
      id: '/(auth)/signIn/'
      path: '/signIn'
      fullPath: '/signIn'
      preLoaderRoute: typeof authSignInIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface mainMainRouteRouteChildren {
  mainMainIndexRoute: typeof mainMainIndexRoute
}

const mainMainRouteRouteChildren: mainMainRouteRouteChildren = {
  mainMainIndexRoute: mainMainIndexRoute,
}

const mainMainRouteRouteWithChildren = mainMainRouteRoute._addFileChildren(
  mainMainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  TestRoute: TestRoute,
  mainMainRouteRoute: mainMainRouteRouteWithChildren,
  initialIndexRoute: initialIndexRoute,
  authSignInIndexRoute: authSignInIndexRoute,
  authSignUpIndexRoute: authSignUpIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
